// Top level rule is `document`.
document               = { 
    SOI ~
    (section? ~ newline_char)* ~ section? ~
    EOI
} //-- the last section? catches the last line
    
// here, command_stmt should be replaced by control_block? or have both?
section = {
    environment_stmt |
    command_stmt |
    expression
}

expression             = { token* }
token     = { operator | command_stmt | literal | command_stmt_body }
literal                 = @{ char+ } //-- letters and numbers with no spaces
char                    = @{ ASCII_ALPHANUMERIC | punctuation }
punctuation             = {
    "," | "." | ";" | "(" | ")" | "[" | "]" | "|" | "<" | ">" | ":" 
}
// comment = { "% " ~ ANY ~ NEWLINE }


// Control Statement Grammar
command_stmt = { control_character ~ command_stmt_name ~ "{" ~ expression ~ "}" }
command_stmt_name = {
    name
}
command_stmt_body = { "{" ~ expression ~ "}" }


// Control Characters & Meta Characters
name                        = @{ ASCII_ALPHA+ } //-- used for command and environment names
WHITESPACE                  = _{ " " }
newline_char                = _{"\n"}
control_character           = _{ "\\" }
space_character             = _{ " " }
tab_character               = _{ "\t" }
caret_return_character      = _{ "\r" }

operator = {
    operator_infix |
    operator_postfix
}
operator_infix = {
    "=" | "+" | "-" | "â€“" | "*" | "/"
}
operator_postfix  = { "!" }

// Environment Grammar
environment_stmt     = { environment_begin ~ environment_content ~ environment_end }
environment_content  = { (section? ~ newline_char)* }
environment_begin    = { control_character ~ "begin" ~ "{" ~ environment_name ~ "}" }
environment_end      = { control_character ~ "end" ~ "{" ~ environment_name ~ "}" }
environment_name     = { ASCII_ALPHA+ }